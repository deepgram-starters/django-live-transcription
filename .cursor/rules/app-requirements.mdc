---
description: Starter App Requirements
globs: *.py, transcription/
alwaysApply: false
---

# Django Live Transcription Starter App Requirements

Build a Django version of the flask-live-transcription app for real-time speech-to-text using Deepgram API.

## Core Requirements
- MUST use Django Channels for WebSocket support (replaces Flask-SocketIO)
- MUST implement ASGI application setup (not WSGI) to support WebSocket consumers
- MUST use in-memory channel layer for simplicity (no Redis needed)
- MUST use latest Deepgram SDK version (v4.8.1+)
- MUST get API keys from EXPORT terminal commands. DON'T use `.`env` files.
- MUST run with single command: `python app.py`
- MUST provide clear code comments explaining Deepgram integration

Essential dependencies:
```python
django>=4.2
channels>=4.0
deepgram-sdk>=v3.10.1
python-dotenv>=1.0.0
django-cors-headers>=4.0
```

## App Requirements
- MUST integrate with Deepgram Live Transcription API
- MUST handle real-time audio streaming from browser microphone
- MUST support start/stop/restart transcription functionality
- MUST display live transcription results in browser interface
- MUST use WebSocket Consumer class for handling connections
- MUST implement proper Deepgram connection lifecycle management
- MUST exit gracefully and cleanup connections on disconnect
- MUST display transcribed audio in browser
- MUST use standard UI elements from the Deepgram Starter UI project for: buttons, text, fonts, etc

Core WebSocket Consumer structure:
```python
class TranscriptionConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        # Accept WebSocket, setup Deepgram client
    async def receive(self, text_data):
        # Handle toggle_transcription, audio_stream, restart_deepgram
    async def initialize_deepgram_connection(self):
        # Setup Deepgram with model="nova-3", language="en-US"
```

## Server Requirements
- MUST run Django development server with ASGI support
- MUST print connection events to terminal for debugging
- MUST log Deepgram connection status (open, close, error)
- MUST display transcription results in terminal console
- MUST handle graceful shutdown on Ctrl+C
- MUST provide clear error messages for missing API keys

Terminal output should match Flask version:

```bash
Starting ASGI/Channel Layer
Client connected
Starting Deepgram connection
[Transcription results printed here]
```

## API Requirements
- MUST serve WebSocket on same port as HTTP (single Django server)
- MUST configure WebSocket routing at `/ws/transcription/`
- MUST handle these WebSocket message types:
  - `toggle_transcription` (start/stop)
  - `audio_stream` (binary audio data)
  - `restart_deepgram` (connection reset)
- MUST emit `transcription_update` messages to client
- MUST configure CORS for WebSocket connections if needed

ASGI routing configuration:

```python
application = ProtocolTypeRouter({
    'http': get_asgi_application(),
    'websocket': URLRouter([
        re_path(r'ws/transcription/$', TranscriptionConsumer.as_asgi()),
    ]),
})
```

## Test Requirements
- MUST use pytest
- MUST run with `pytest -v test_app.py`
- MUST test WebSocket connection establishment
- MUST test audio streaming with "audio/webm" format
- MUST test transcription start/stop toggle functionality
- MUST test connection restart capability
- MUST test proper cleanup on disconnect
- MUST validate Deepgram API integration works

